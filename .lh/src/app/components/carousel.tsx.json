{
    "sourceFile": "src/app/components/carousel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1742715771805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742716047765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,14 @@\n \r\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./carousel.module.css\";\r\n import Image from \"next/image\";\r\n-import { RoomImage } from \"../model/room_interface\";\r\n+import { RoomImage, RoomPage } from \"../model/room_interface\";\r\n \r\n-export const RoomCarousel = ({ room }) => {\r\n+export const RoomCarousel: React.FC<RoomPage> = ({ room }) => {\r\n \tconst [activeSlide, setActiveSlide] = useState(0);\r\n \tconst [isAutoPlay, setIsAutoPlay] = useState(true);\r\n-\tconst [images, setImages]: RoomImage[] = useState([]);\r\n+\tconst [images, setImages] = useState<RoomImage[]>([]);\r\n \r\n \tuseEffect(() => {\r\n \t\tif (room) {\r\n \t\t\tconst imageArr = [];\r\n@@ -37,14 +37,14 @@\n \t\t\tprevIndex === 0 ? images.length - 1 : prevIndex - 1\r\n \t\t);\r\n \t};\r\n \r\n-\tconst goToSlide = (index) => {\r\n+\tconst goToSlide = (index: number) => {\r\n \t\tsetActiveSlide(index);\r\n \t};\r\n \r\n \tuseEffect(() => {\r\n-\t\tlet interval;\r\n+\t\tlet interval: NodeJS.Timeout;\r\n \r\n \t\tif (isAutoPlay && images.length > 1) {\r\n \t\t\tinterval = setInterval(() => {\r\n \t\t\t\tgoToNext();\r\n"
                }
            ],
            "date": 1742715771805,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styles from \"./carousel.module.css\";\r\nimport Image from \"next/image\";\r\nimport { RoomImage } from \"../model/room_interface\";\r\n\r\nexport const RoomCarousel = ({ room }) => {\r\n\tconst [activeSlide, setActiveSlide] = useState(0);\r\n\tconst [isAutoPlay, setIsAutoPlay] = useState(true);\r\n\tconst [images, setImages]: RoomImage[] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (room) {\r\n\t\t\tconst imageArr = [];\r\n\t\t\tfor (let i = 1; i <= 10; i++) {\r\n\t\t\t\tconst imageKey = `image${i}`;\r\n\t\t\t\tif (room[imageKey]) {\r\n\t\t\t\t\timageArr.push({\r\n\t\t\t\t\t\tsrc: room[imageKey],\r\n\t\t\t\t\t\talt: `${room.name} - View ${i}`,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetImages(imageArr);\r\n\t\t}\r\n\t}, [room]);\r\n\r\n\tconst goToNext = () => {\r\n\t\tsetActiveSlide((prevIndex) =>\r\n\t\t\tprevIndex === images.length - 1 ? 0 : prevIndex + 1\r\n\t\t);\r\n\t};\r\n\r\n\tconst goToPrevious = () => {\r\n\t\tsetActiveSlide((prevIndex) =>\r\n\t\t\tprevIndex === 0 ? images.length - 1 : prevIndex - 1\r\n\t\t);\r\n\t};\r\n\r\n\tconst goToSlide = (index) => {\r\n\t\tsetActiveSlide(index);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet interval;\r\n\r\n\t\tif (isAutoPlay && images.length > 1) {\r\n\t\t\tinterval = setInterval(() => {\r\n\t\t\t\tgoToNext();\r\n\t\t\t}, 5000);\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\tif (interval) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t}\r\n\t\t};\r\n\t}, [isAutoPlay, images.length]);\r\n\r\n\tconst handleMouseEnter = () => setIsAutoPlay(false);\r\n\tconst handleMouseLeave = () => setIsAutoPlay(true);\r\n\r\n\t// If no images, show placeholder\r\n\tif (images.length === 0) {\r\n\t\treturn <div className={styles.placeholder}>No images available</div>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={styles.carouselContainer}\r\n\t\t\tonMouseEnter={handleMouseEnter}\r\n\t\t\tonMouseLeave={handleMouseLeave}>\r\n\t\t\t{/* Main image display */}\r\n\t\t\t<div className={styles.imageContainer}>\r\n\t\t\t\t<Image\r\n\t\t\t\t\tsrc={images[activeSlide].src}\r\n\t\t\t\t\talt={images[activeSlide].alt}\r\n\t\t\t\t\tfill\r\n\t\t\t\t\tclassName={styles.carouselImage}\r\n\t\t\t\t\tpriority={activeSlide === 0}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Navigation Arrows - only show if more than one image */}\r\n\t\t\t{images.length > 1 && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={goToPrevious}\r\n\t\t\t\t\t\tclassName={`${styles.navButton} ${styles.prevButton}`}\r\n\t\t\t\t\t\taria-label=\"Previous image\">\r\n\t\t\t\t\t\t&lt;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={goToNext}\r\n\t\t\t\t\t\tclassName={`${styles.navButton} ${styles.nextButton}`}\r\n\t\t\t\t\t\taria-label=\"Next image\">\r\n\t\t\t\t\t\t&gt;\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\r\n\t\t\t{/* Thumbnail navigation */}\r\n\t\t\t{images.length > 1 && (\r\n\t\t\t\t<div className={styles.thumbnailContainer}>\r\n\t\t\t\t\t{images.map((image, index) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tclassName={`${styles.thumbnail} ${\r\n\t\t\t\t\t\t\t\tindex === activeSlide ? styles.activeThumbnail : \"\"\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\tonClick={() => goToSlide(index)}>\r\n\t\t\t\t\t\t\t<Image\r\n\t\t\t\t\t\t\t\tsrc={image.src}\r\n\t\t\t\t\t\t\t\talt={`Thumbnail ${index + 1}`}\r\n\t\t\t\t\t\t\t\tfill\r\n\t\t\t\t\t\t\t\tclassName={styles.thumbnailImage}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t{/* Indicators - dots at the bottom */}\r\n\t\t\t{images.length > 1 && (\r\n\t\t\t\t<div className={styles.indicators}>\r\n\t\t\t\t\t{images.map((_, index) => (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tonClick={() => goToSlide(index)}\r\n\t\t\t\t\t\t\tclassName={`${styles.indicator} ${\r\n\t\t\t\t\t\t\t\tindex === activeSlide ? styles.activeIndicator : \"\"\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t\taria-label={`Go to image ${index + 1}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n"
        }
    ]
}